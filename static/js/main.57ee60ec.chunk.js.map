{"version":3,"sources":["components/Navbar.js","components/Form.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Form","useState","text","setText","copyButton","setCopyButton","style","backgroundColor","color","heading","value","onChange","event","console","log","target","rows","document","getElementById","select","navigator","clipboard","writeText","showAlert","newText","toUpperCase","toLowerCase","split","join","size","length","Math","ceil","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57ee60ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              \r\n            </ul>\r\n            <div className={`form-check form-switch mx-2 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Form(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase is clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\")\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"Change detected\");\r\n        setText(event.target.value)\r\n\r\n    }\r\n    const handleLowClick = () => {\r\n        console.log(\"Lowercase is clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\")\r\n\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"mybox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        setCopyButton(\"Copied\")\r\n        props.showAlert(\"Copied to Clipboard\",\"success\")\r\n\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n    \r\n    const [text, setText] = useState(\"\")\r\n    const [copyButton, setCopyButton] = useState(\"Copy\")\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\" style={{backgroundColor: props.mode === 'dark'?'#00001a':'white', color: props.mode === 'dark'?'white':'black'}}>\r\n                <h1><pre>{props.heading}</pre></h1>\r\n                <div className=\"textarea-container\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\" style={{backgroundColor: props.mode === 'light'?'white':'#00001a',color: props.mode==='light'?'black':'white'}}></textarea>\r\n                    <button onClick={handleCopy} value={copyButton} type=\"button\">{copyButton}</button>\r\n                </div>\r\n                <button className={`btn btn-${props.mode=== 'dark'?'warning':'primary'} my-2 mx-2`} onClick={handleClearClick}>Clear Text</button>\r\n                <button className={`btn btn-${props.mode=== 'dark'?'warning':'primary'} my-2 mx-2`} onClick={handleUpClick}>UPPERCASE</button>\r\n                <button className={`btn btn-${props.mode=== 'dark'?'warning':'primary'} my-2 mx-2`} onClick={handleLowClick}>lowercase</button>\r\n                <button className={`btn btn-${props.mode=== 'dark'?'warning':'primary'} my-2 mx-2`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <hr className=\"rounded\" size=\"6\"/>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n                <h2><pre>Text Summary</pre></h2>\r\n                <h5><pre>Word Count: {text.length>0?text.split(\" \").length:0}  Character Count: {text.length}</pre></h5>\r\n                <pre>{text.length>0?Math.ceil(0.008 * text.split(\" \").length):0} minute read</pre>\r\n                <hr className=\"rounded\" size=\"6\" />\r\n\r\n\r\n                <h2>Preview</h2>\r\n\r\n                <p>{text.length>0?text:\"Enter text in the textbox above to preview here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n        props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>!{props.alert.msg}\r\n            </div>\r\n        \r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Form from './components/Form';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#00001a\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Form showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n      </div>\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}